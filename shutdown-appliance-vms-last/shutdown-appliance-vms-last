#!/usr/bin/env python
"""
ISC License

Copyright (c) 2017, Citrix Systems Inc.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
"""

import subprocess
import sys
import threading
import imp
import XenAPI
import argparse

def get_running_hci_vms(session, host):
    """Return a list of (vm, record) pairs for all VMs running on the given host"""
    vms = []
    for vm in session.xenapi.host.get_resident_VMs(host):
        record = session.xenapi.VM.get_record(vm)
        if not(record["is_control_domain"]) and record["power_state"] == "Running":
            if record['other_config'].has_key('hci_poweroff') and record['other_config'].get('hci_poweroff') == "true":
                print "\n Found HCI appliance VM %s uuid=%s , it will now be powered off\n" %(record["name_label"], record["uuid"])
                vms.append((vm,record))
    return vms

def main(session, host_uuid, force):
    shutdown = imp.load_source('shutdown', '/opt/xensource/libexec/shutdown')
    host = session.xenapi.host.get_by_uuid(host_uuid)
    rc = 0
    vms = get_running_hci_vms(session, host)

    if not force:
        rc += shutdown.parallel_clean_shutdown(session, vms)
    else:
        rc += shutdown.serial_hard_shutdown(session, vms)
    return rc

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Process the options')
    parser.add_argument('--force', dest='force', action='store_const', const=True , default=False, help='Specify whether to force shutdown')
    parser.add_argument('uuid', metavar='V', type=str, help='Specify the host uuid')
    args = parser.parse_args()

    uuid = args.uuid
    force = args.force

    new_session = XenAPI.xapi_local()

    try:
        new_session.xenapi.login_with_password("root", "")
    
    except Exception:
        print 'Failed to connect to master.'
        sys.exit(2)

    try:
        rc = main(new_session, uuid, force)
        sys.exit(rc)
    except Exception, e:
        print "Caught %s" % str(e)
        sys.exit(1)
    finally:
        new_session.xenapi.session.logout()

